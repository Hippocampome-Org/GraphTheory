function validSwapClassPartners = getValidSwapClassList(thisDimerNumber, swapStringencyCode)
% swap stringency code:
% 1 = swap any unidirectional dimers & swap any bidirectional dimers
% 2 = preserve sign of edge only
% 3 = preserve sign of edge & sign of "to" node
% 4 = preserve dimers & sign of "to" node
% 5 = preserve dimers & sign of "from" node
% 6 = swap only like dimers
    
    numDimers = 10;
    swapClasses = cell(numDimers,1);
    
    % initialization; also serves to specify no valid swaps for superpatterns -C to -A
    for i = 1:numDimers
        swapClasses{i} = zeros(1,6);
    end

    swapClasses{4} = {...
        [4 5 6 7]...
        [4 5 6]...
        [4 5 6]...
        [4 6]...
        [4 5]...
        4;};
    
    swapClasses{5} = {...      
        [4 5 6 7]...
        [4 5 7]...
        [4 5 7]...
        [5 7]...
        [4 5]...
        5;};
       
    swapClasses{6} = {...          
        [4 5 6 7]...
        [4 6 7]...
        [4 6 7]...
        [4 6]...
        [6 7]...
        6;};
       
    swapClasses{7} = {...          
        [4 5 6 7]...
        [5 6 7]...
        [5 6 7]...
        [5 7]...
        [6 7]...
        7;};

    
    %%%%%%%%%%%%%%%%%%%%%%%%%
    
    swapClasses{8} = {...                
        [8 9 10]...
        [8 9]...
        [8 9]...
        [8 9]...
        8 ...
        8;};
       
    swapClasses{9} = {...                
        [8 9 10]...
        [8 9 10]...
        [8 9 10]...
        [8 9 10]...
        9 ...
        9;};
       
    swapClasses{10} = {...                
        [8 9 10]...
        [9 10]...
        [9 10]...
        [9 10]...
        10 ...
        10;};
       
    
    validSwapClassPartners = swapClasses{thisDimerNumber}(swapStringencyCode);
   
    save validSwapClassLib swapClasses;
end